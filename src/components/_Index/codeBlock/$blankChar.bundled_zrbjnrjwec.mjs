// src/components/_Index/codeBlock/astroCode.ts
var code = `---
import Button from './Button.astro';
import MyReactButton from './MyReactButton.jsx';
import MySvelteButton from './MySvelteButton.svelte';
---
<div>
  <Button />
  <MyReactButton client:idle />
  <MySvelteButton client:load />
</div>`;
var _astroCodeBlankChar = [0];
Array.from(code).forEach((char) => {
  if (char === '\n') _astroCodeBlankChar.push(0);
  else _astroCodeBlankChar[_astroCodeBlankChar.length - 1]++;
});
var astroCodeBlankChar = _astroCodeBlankChar;

// src/components/_Index/codeBlock/qwikCode.ts
var code2 = `import { component$ } from '@builder.io/qwik';
 
export default component$(() => {
  return <section>A Joke!</section>;
});`;
var _qwikCodeBlankChar = [0];
Array.from(code2).forEach((char) => {
  if (char === '\n') _qwikCodeBlankChar.push(0);
  else _qwikCodeBlankChar[_qwikCodeBlankChar.length - 1]++;
});
var qwikCodeBlankChar = _qwikCodeBlankChar;

// src/components/_Index/codeBlock/reactCode.ts
var code3 = `export default function MyApp() {
  return (
    <div>
      <h1>Welcome to my app</h1>
    </div>
  );
}`;
var _reactCodeBlankChar = [0];
Array.from(code3).forEach((char) => {
  if (char === '\n') _reactCodeBlankChar.push(0);
  else _reactCodeBlankChar[_reactCodeBlankChar.length - 1]++;
});
var reactCodeBlankChar = _reactCodeBlankChar;

// src/components/_Index/codeBlock/reactCode2.ts
var code4 = `export default function MyApp() {
  return (
    <div class="flex h-[100%] w-full">
      <div class="w-[30%] bg-white"/>
      <div class="flex w-[70%] items-center bg-custom-yellow-400">
        <p class="m-8 text-[1.5em]">
          Let's learn web development
        </p>
      </div>
    </div>
  );
}`;
var _reactCode2BlankChar = [0];
Array.from(code4).forEach((char) => {
  if (char === '\n') _reactCode2BlankChar.push(0);
  else _reactCode2BlankChar[_reactCode2BlankChar.length - 1]++;
});
var reactCode2BlankChar = _reactCode2BlankChar;

// src/components/_Index/codeBlock/$blankChar.ts
var blankChar_default = () => {
  return {
    data: {
      astroCodeBlankChar,
      qwikCodeBlankChar,
      reactCodeBlankChar,
      reactCode2BlankChar,
    },
  };
};
export { blankChar_default as default };
//# sourceMappingURL=data:application/json;base64,
